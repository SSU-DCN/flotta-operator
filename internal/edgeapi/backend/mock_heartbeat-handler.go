// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-flotta/flotta-operator/internal/edgeapi/backend (interfaces: HeartbeatHandler)

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHeartbeatHandler is a mock of HeartbeatHandler interface.
type MockHeartbeatHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeatHandlerMockRecorder
}

// MockHeartbeatHandlerMockRecorder is the mock recorder for MockHeartbeatHandler.
type MockHeartbeatHandlerMockRecorder struct {
	mock *MockHeartbeatHandler
}

// NewMockHeartbeatHandler creates a new mock instance.
func NewMockHeartbeatHandler(ctrl *gomock.Controller) *MockHeartbeatHandler {
	mock := &MockHeartbeatHandler{ctrl: ctrl}
	mock.recorder = &MockHeartbeatHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeartbeatHandler) EXPECT() *MockHeartbeatHandlerMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockHeartbeatHandler) Process(arg0 context.Context, arg1 Notification) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockHeartbeatHandlerMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockHeartbeatHandler)(nil).Process), arg0, arg1)
}
