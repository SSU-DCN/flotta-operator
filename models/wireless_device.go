// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WirelessDevice wireless device
//
// swagger:model wireless_device
type WirelessDevice struct {

	// Online status of the end device; Online/offline
	Availability string `json:"availability,omitempty"`

	// Battery percentage of the end device; otherwise null
	Battery string `json:"battery,omitempty"`

	// ble characteristics
	BleCharacteristics []*BleCharacteristic `json:"ble_characteristics"`

	// Communication method used by the end node device. Zigbee, Wi-Fi, BLE, Zigbee etc.
	Connection string `json:"connection,omitempty"`

	// Whether the device is a sensor or actuator
	DeviceType string `json:"device_type,omitempty"`

	// unique identifier for device e.g. Serial number
	Identifiers string `json:"identifiers,omitempty"`

	// The last time the end node transacted
	LastSeen string `json:"last_seen,omitempty"`

	// Device Manufacturer of the end node
	Manufacturer string `json:"manufacturer,omitempty"`

	// Model number/string of the end node device
	Model string `json:"model,omitempty"`

	// Friendly name of the device.
	Name string `json:"name,omitempty"`

	// Transfer protocol used by the end node device. MQTT, HTTP, COAP etc.
	Protocol string `json:"protocol,omitempty"`

	// if end node device is a sensor, JSON format data will be here otherwise will be null
	Readings string `json:"readings,omitempty"`

	// This will show the status of the end node if it is a switch or actuator. ON/OFF, 1/0, TRUE/FALSE
	State string `json:"state,omitempty"`

	// Software version of the end node device
	SwVersion string `json:"sw_version,omitempty"`
}

// Validate validates this wireless device
func (m *WirelessDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBleCharacteristics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WirelessDevice) validateBleCharacteristics(formats strfmt.Registry) error {
	if swag.IsZero(m.BleCharacteristics) { // not required
		return nil
	}

	for i := 0; i < len(m.BleCharacteristics); i++ {
		if swag.IsZero(m.BleCharacteristics[i]) { // not required
			continue
		}

		if m.BleCharacteristics[i] != nil {
			if err := m.BleCharacteristics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ble_characteristics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ble_characteristics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this wireless device based on the context it is used
func (m *WirelessDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBleCharacteristics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WirelessDevice) contextValidateBleCharacteristics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BleCharacteristics); i++ {

		if m.BleCharacteristics[i] != nil {
			if err := m.BleCharacteristics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ble_characteristics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ble_characteristics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WirelessDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WirelessDevice) UnmarshalBinary(b []byte) error {
	var res WirelessDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
