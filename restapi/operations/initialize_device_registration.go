// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// InitializeDeviceRegistrationHandlerFunc turns a function with the right signature into a initialize device registration handler
type InitializeDeviceRegistrationHandlerFunc func(InitializeDeviceRegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InitializeDeviceRegistrationHandlerFunc) Handle(params InitializeDeviceRegistrationParams) middleware.Responder {
	return fn(params)
}

// InitializeDeviceRegistrationHandler interface for that can handle valid initialize device registration params
type InitializeDeviceRegistrationHandler interface {
	Handle(InitializeDeviceRegistrationParams) middleware.Responder
}

// NewInitializeDeviceRegistration creates a new http.Handler for the initialize device registration operation
func NewInitializeDeviceRegistration(ctx *middleware.Context, handler InitializeDeviceRegistrationHandler) *InitializeDeviceRegistration {
	return &InitializeDeviceRegistration{Context: ctx, Handler: handler}
}

/*InitializeDeviceRegistration swagger:route POST /namespaces/{namespace}/devices/{device-id}/register initializeDeviceRegistration

Initializes the process of registering the device

*/
type InitializeDeviceRegistration struct {
	Context *middleware.Context
	Handler InitializeDeviceRegistrationHandler
}

func (o *InitializeDeviceRegistration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInitializeDeviceRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
