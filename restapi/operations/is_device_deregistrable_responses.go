// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/project-flotta/flotta-operator/models"
)

// IsDeviceDeregistrableOKCode is the HTTP code returned for type IsDeviceDeregistrableOK
const IsDeviceDeregistrableOKCode int = 200

/*IsDeviceDeregistrableOK Success

swagger:response isDeviceDeregistrableOK
*/
type IsDeviceDeregistrableOK struct {
}

// NewIsDeviceDeregistrableOK creates IsDeviceDeregistrableOK with default headers values
func NewIsDeviceDeregistrableOK() *IsDeviceDeregistrableOK {

	return &IsDeviceDeregistrableOK{}
}

// WriteResponse to the client
func (o *IsDeviceDeregistrableOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// IsDeviceDeregistrableUnauthorizedCode is the HTTP code returned for type IsDeviceDeregistrableUnauthorized
const IsDeviceDeregistrableUnauthorizedCode int = 401

/*IsDeviceDeregistrableUnauthorized Unauthorized

swagger:response isDeviceDeregistrableUnauthorized
*/
type IsDeviceDeregistrableUnauthorized struct {
}

// NewIsDeviceDeregistrableUnauthorized creates IsDeviceDeregistrableUnauthorized with default headers values
func NewIsDeviceDeregistrableUnauthorized() *IsDeviceDeregistrableUnauthorized {

	return &IsDeviceDeregistrableUnauthorized{}
}

// WriteResponse to the client
func (o *IsDeviceDeregistrableUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// IsDeviceDeregistrableForbiddenCode is the HTTP code returned for type IsDeviceDeregistrableForbidden
const IsDeviceDeregistrableForbiddenCode int = 403

/*IsDeviceDeregistrableForbidden Forbidden

swagger:response isDeviceDeregistrableForbidden
*/
type IsDeviceDeregistrableForbidden struct {
}

// NewIsDeviceDeregistrableForbidden creates IsDeviceDeregistrableForbidden with default headers values
func NewIsDeviceDeregistrableForbidden() *IsDeviceDeregistrableForbidden {

	return &IsDeviceDeregistrableForbidden{}
}

// WriteResponse to the client
func (o *IsDeviceDeregistrableForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

/*IsDeviceDeregistrableDefault Error

swagger:response isDeviceDeregistrableDefault
*/
type IsDeviceDeregistrableDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewIsDeviceDeregistrableDefault creates IsDeviceDeregistrableDefault with default headers values
func NewIsDeviceDeregistrableDefault(code int) *IsDeviceDeregistrableDefault {
	if code <= 0 {
		code = 500
	}

	return &IsDeviceDeregistrableDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the is device deregistrable default response
func (o *IsDeviceDeregistrableDefault) WithStatusCode(code int) *IsDeviceDeregistrableDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the is device deregistrable default response
func (o *IsDeviceDeregistrableDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the is device deregistrable default response
func (o *IsDeviceDeregistrableDefault) WithPayload(payload *models.Error) *IsDeviceDeregistrableDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the is device deregistrable default response
func (o *IsDeviceDeregistrableDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IsDeviceDeregistrableDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
