// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/project-flotta/flotta-operator/models"
)

// NewFinalizeDeviceRegistrationParams creates a new FinalizeDeviceRegistrationParams object
// with the default values initialized.
func NewFinalizeDeviceRegistrationParams() *FinalizeDeviceRegistrationParams {
	var ()
	return &FinalizeDeviceRegistrationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFinalizeDeviceRegistrationParamsWithTimeout creates a new FinalizeDeviceRegistrationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFinalizeDeviceRegistrationParamsWithTimeout(timeout time.Duration) *FinalizeDeviceRegistrationParams {
	var ()
	return &FinalizeDeviceRegistrationParams{

		timeout: timeout,
	}
}

// NewFinalizeDeviceRegistrationParamsWithContext creates a new FinalizeDeviceRegistrationParams object
// with the default values initialized, and the ability to set a context for a request
func NewFinalizeDeviceRegistrationParamsWithContext(ctx context.Context) *FinalizeDeviceRegistrationParams {
	var ()
	return &FinalizeDeviceRegistrationParams{

		Context: ctx,
	}
}

// NewFinalizeDeviceRegistrationParamsWithHTTPClient creates a new FinalizeDeviceRegistrationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFinalizeDeviceRegistrationParamsWithHTTPClient(client *http.Client) *FinalizeDeviceRegistrationParams {
	var ()
	return &FinalizeDeviceRegistrationParams{
		HTTPClient: client,
	}
}

/*FinalizeDeviceRegistrationParams contains all the parameters to send to the API endpoint
for the finalize device registration operation typically these are written to a http.Request
*/
type FinalizeDeviceRegistrationParams struct {

	/*CertificateStatus*/
	CertificateStatus models.RegistrationInfo
	/*DeviceID
	  Device ID

	*/
	DeviceID string
	/*Namespace
	  Namespace where the device resides

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) WithTimeout(timeout time.Duration) *FinalizeDeviceRegistrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) WithContext(ctx context.Context) *FinalizeDeviceRegistrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) WithHTTPClient(client *http.Client) *FinalizeDeviceRegistrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCertificateStatus adds the certificateStatus to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) WithCertificateStatus(certificateStatus models.RegistrationInfo) *FinalizeDeviceRegistrationParams {
	o.SetCertificateStatus(certificateStatus)
	return o
}

// SetCertificateStatus adds the certificateStatus to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) SetCertificateStatus(certificateStatus models.RegistrationInfo) {
	o.CertificateStatus = certificateStatus
}

// WithDeviceID adds the deviceID to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) WithDeviceID(deviceID string) *FinalizeDeviceRegistrationParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithNamespace adds the namespace to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) WithNamespace(namespace string) *FinalizeDeviceRegistrationParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the finalize device registration params
func (o *FinalizeDeviceRegistrationParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *FinalizeDeviceRegistrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CertificateStatus != nil {
		if err := r.SetBodyParam(o.CertificateStatus); err != nil {
			return err
		}
	}

	// path param device-id
	if err := r.SetPathParam("device-id", o.DeviceID); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
