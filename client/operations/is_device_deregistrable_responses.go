// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project-flotta/flotta-operator/models"
)

// IsDeviceDeregistrableReader is a Reader for the IsDeviceDeregistrable structure.
type IsDeviceDeregistrableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsDeviceDeregistrableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsDeviceDeregistrableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIsDeviceDeregistrableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIsDeviceDeregistrableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIsDeviceDeregistrableDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIsDeviceDeregistrableOK creates a IsDeviceDeregistrableOK with default headers values
func NewIsDeviceDeregistrableOK() *IsDeviceDeregistrableOK {
	return &IsDeviceDeregistrableOK{}
}

/*IsDeviceDeregistrableOK handles this case with default header values.

Success
*/
type IsDeviceDeregistrableOK struct {
}

func (o *IsDeviceDeregistrableOK) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/deregister][%d] isDeviceDeregistrableOK ", 200)
}

func (o *IsDeviceDeregistrableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsDeviceDeregistrableUnauthorized creates a IsDeviceDeregistrableUnauthorized with default headers values
func NewIsDeviceDeregistrableUnauthorized() *IsDeviceDeregistrableUnauthorized {
	return &IsDeviceDeregistrableUnauthorized{}
}

/*IsDeviceDeregistrableUnauthorized handles this case with default header values.

Unauthorized
*/
type IsDeviceDeregistrableUnauthorized struct {
}

func (o *IsDeviceDeregistrableUnauthorized) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/deregister][%d] isDeviceDeregistrableUnauthorized ", 401)
}

func (o *IsDeviceDeregistrableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsDeviceDeregistrableForbidden creates a IsDeviceDeregistrableForbidden with default headers values
func NewIsDeviceDeregistrableForbidden() *IsDeviceDeregistrableForbidden {
	return &IsDeviceDeregistrableForbidden{}
}

/*IsDeviceDeregistrableForbidden handles this case with default header values.

Forbidden
*/
type IsDeviceDeregistrableForbidden struct {
}

func (o *IsDeviceDeregistrableForbidden) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/deregister][%d] isDeviceDeregistrableForbidden ", 403)
}

func (o *IsDeviceDeregistrableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsDeviceDeregistrableDefault creates a IsDeviceDeregistrableDefault with default headers values
func NewIsDeviceDeregistrableDefault(code int) *IsDeviceDeregistrableDefault {
	return &IsDeviceDeregistrableDefault{
		_statusCode: code,
	}
}

/*IsDeviceDeregistrableDefault handles this case with default header values.

Error
*/
type IsDeviceDeregistrableDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the is device deregistrable default response
func (o *IsDeviceDeregistrableDefault) Code() int {
	return o._statusCode
}

func (o *IsDeviceDeregistrableDefault) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/deregister][%d] IsDeviceDeregistrable default  %+v", o._statusCode, o.Payload)
}

func (o *IsDeviceDeregistrableDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *IsDeviceDeregistrableDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
