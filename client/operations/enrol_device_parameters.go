// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/project-flotta/flotta-operator/models"
)

// NewEnrolDeviceParams creates a new EnrolDeviceParams object
// with the default values initialized.
func NewEnrolDeviceParams() *EnrolDeviceParams {
	var ()
	return &EnrolDeviceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEnrolDeviceParamsWithTimeout creates a new EnrolDeviceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEnrolDeviceParamsWithTimeout(timeout time.Duration) *EnrolDeviceParams {
	var ()
	return &EnrolDeviceParams{

		timeout: timeout,
	}
}

// NewEnrolDeviceParamsWithContext creates a new EnrolDeviceParams object
// with the default values initialized, and the ability to set a context for a request
func NewEnrolDeviceParamsWithContext(ctx context.Context) *EnrolDeviceParams {
	var ()
	return &EnrolDeviceParams{

		Context: ctx,
	}
}

// NewEnrolDeviceParamsWithHTTPClient creates a new EnrolDeviceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEnrolDeviceParamsWithHTTPClient(client *http.Client) *EnrolDeviceParams {
	var ()
	return &EnrolDeviceParams{
		HTTPClient: client,
	}
}

/*EnrolDeviceParams contains all the parameters to send to the API endpoint
for the enrol device operation typically these are written to a http.Request
*/
type EnrolDeviceParams struct {

	/*DeviceID
	  Device ID

	*/
	DeviceID string
	/*EnrolmentInfo*/
	EnrolmentInfo *models.EnrolmentInfo
	/*Namespace
	  Namespace where the device resides

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the enrol device params
func (o *EnrolDeviceParams) WithTimeout(timeout time.Duration) *EnrolDeviceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enrol device params
func (o *EnrolDeviceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enrol device params
func (o *EnrolDeviceParams) WithContext(ctx context.Context) *EnrolDeviceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enrol device params
func (o *EnrolDeviceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enrol device params
func (o *EnrolDeviceParams) WithHTTPClient(client *http.Client) *EnrolDeviceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enrol device params
func (o *EnrolDeviceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the enrol device params
func (o *EnrolDeviceParams) WithDeviceID(deviceID string) *EnrolDeviceParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the enrol device params
func (o *EnrolDeviceParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithEnrolmentInfo adds the enrolmentInfo to the enrol device params
func (o *EnrolDeviceParams) WithEnrolmentInfo(enrolmentInfo *models.EnrolmentInfo) *EnrolDeviceParams {
	o.SetEnrolmentInfo(enrolmentInfo)
	return o
}

// SetEnrolmentInfo adds the enrolmentInfo to the enrol device params
func (o *EnrolDeviceParams) SetEnrolmentInfo(enrolmentInfo *models.EnrolmentInfo) {
	o.EnrolmentInfo = enrolmentInfo
}

// WithNamespace adds the namespace to the enrol device params
func (o *EnrolDeviceParams) WithNamespace(namespace string) *EnrolDeviceParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the enrol device params
func (o *EnrolDeviceParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *EnrolDeviceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device-id
	if err := r.SetPathParam("device-id", o.DeviceID); err != nil {
		return err
	}

	if o.EnrolmentInfo != nil {
		if err := r.SetBodyParam(o.EnrolmentInfo); err != nil {
			return err
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
