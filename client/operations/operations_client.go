// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the operations client
type API interface {
	/*
	   EnrolDevice Initiates the process of enrolling the device*/
	EnrolDevice(ctx context.Context, params *EnrolDeviceParams) (*EnrolDeviceOK, error)
	/*
	   FinalizeDeviceRegistration Updates the status of the device as registered and its hardware configuration*/
	FinalizeDeviceRegistration(ctx context.Context, params *FinalizeDeviceRegistrationParams) (*FinalizeDeviceRegistrationOK, error)
	/*
	   GetDeviceConfiguration Returns the device configuration*/
	GetDeviceConfiguration(ctx context.Context, params *GetDeviceConfigurationParams) (*GetDeviceConfigurationOK, error)
	/*
	   InitializeDeviceRegistration Initializes the process of registering the device*/
	InitializeDeviceRegistration(ctx context.Context, params *InitializeDeviceRegistrationParams) (*InitializeDeviceRegistrationOK, error)
	/*
	   IsDeviceDeregistrable Confirms if a device can be deregistered*/
	IsDeviceDeregistrable(ctx context.Context, params *IsDeviceDeregistrableParams) (*IsDeviceDeregistrableOK, error)
}

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
EnrolDevice Initiates the process of enrolling the device
*/
func (a *Client) EnrolDevice(ctx context.Context, params *EnrolDeviceParams) (*EnrolDeviceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EnrolDevice",
		Method:             "POST",
		PathPattern:        "/namespaces/{namespace}/devices/{device-id}/enrol",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnrolDeviceReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnrolDeviceOK), nil

}

/*
FinalizeDeviceRegistration Updates the status of the device as registered and its hardware configuration
*/
func (a *Client) FinalizeDeviceRegistration(ctx context.Context, params *FinalizeDeviceRegistrationParams) (*FinalizeDeviceRegistrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FinalizeDeviceRegistration",
		Method:             "PUT",
		PathPattern:        "/namespaces/{namespace}/devices/{device-id}/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FinalizeDeviceRegistrationReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FinalizeDeviceRegistrationOK), nil

}

/*
GetDeviceConfiguration Returns the device configuration
*/
func (a *Client) GetDeviceConfiguration(ctx context.Context, params *GetDeviceConfigurationParams) (*GetDeviceConfigurationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDeviceConfiguration",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/devices/{device-id}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceConfigurationReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceConfigurationOK), nil

}

/*
InitializeDeviceRegistration Initializes the process of registering the device
*/
func (a *Client) InitializeDeviceRegistration(ctx context.Context, params *InitializeDeviceRegistrationParams) (*InitializeDeviceRegistrationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InitializeDeviceRegistration",
		Method:             "POST",
		PathPattern:        "/namespaces/{namespace}/devices/{device-id}/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InitializeDeviceRegistrationReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitializeDeviceRegistrationOK), nil

}

/*
IsDeviceDeregistrable Confirms if a device can be deregistered
*/
func (a *Client) IsDeviceDeregistrable(ctx context.Context, params *IsDeviceDeregistrableParams) (*IsDeviceDeregistrableOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IsDeviceDeregistrable",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/devices/{device-id}/deregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IsDeviceDeregistrableReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsDeviceDeregistrableOK), nil

}
