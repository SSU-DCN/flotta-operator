// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project-flotta/flotta-operator/backend/models"
)

// GetTargetNamespaceReader is a Reader for the GetTargetNamespace structure.
type GetTargetNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTargetNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTargetNamespaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTargetNamespaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTargetNamespaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetTargetNamespaceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTargetNamespaceOK creates a GetTargetNamespaceOK with default headers values
func NewGetTargetNamespaceOK() *GetTargetNamespaceOK {
	return &GetTargetNamespaceOK{}
}

/* GetTargetNamespaceOK describes a response with status code 200, with default header values.

OK
*/
type GetTargetNamespaceOK struct {
	Payload *models.DeviceRegistrationTargetNamespaceResponse
}

func (o *GetTargetNamespaceOK) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/registration/namespace][%d] getTargetNamespaceOK  %+v", 200, o.Payload)
}
func (o *GetTargetNamespaceOK) GetPayload() *models.DeviceRegistrationTargetNamespaceResponse {
	return o.Payload
}

func (o *GetTargetNamespaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceRegistrationTargetNamespaceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTargetNamespaceUnauthorized creates a GetTargetNamespaceUnauthorized with default headers values
func NewGetTargetNamespaceUnauthorized() *GetTargetNamespaceUnauthorized {
	return &GetTargetNamespaceUnauthorized{}
}

/* GetTargetNamespaceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTargetNamespaceUnauthorized struct {
}

func (o *GetTargetNamespaceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/registration/namespace][%d] getTargetNamespaceUnauthorized ", 401)
}

func (o *GetTargetNamespaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTargetNamespaceForbidden creates a GetTargetNamespaceForbidden with default headers values
func NewGetTargetNamespaceForbidden() *GetTargetNamespaceForbidden {
	return &GetTargetNamespaceForbidden{}
}

/* GetTargetNamespaceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTargetNamespaceForbidden struct {
}

func (o *GetTargetNamespaceForbidden) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/registration/namespace][%d] getTargetNamespaceForbidden ", 403)
}

func (o *GetTargetNamespaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTargetNamespaceDefault creates a GetTargetNamespaceDefault with default headers values
func NewGetTargetNamespaceDefault(code int) *GetTargetNamespaceDefault {
	return &GetTargetNamespaceDefault{
		_statusCode: code,
	}
}

/* GetTargetNamespaceDefault describes a response with status code -1, with default header values.

Error
*/
type GetTargetNamespaceDefault struct {
	_statusCode int

	Payload *models.DeviceRegistrationTargetNamespaceResponse
}

// Code gets the status code for the get target namespace default response
func (o *GetTargetNamespaceDefault) Code() int {
	return o._statusCode
}

func (o *GetTargetNamespaceDefault) Error() string {
	return fmt.Sprintf("[GET /namespaces/{namespace}/devices/{device-id}/registration/namespace][%d] GetTargetNamespace default  %+v", o._statusCode, o.Payload)
}
func (o *GetTargetNamespaceDefault) GetPayload() *models.DeviceRegistrationTargetNamespaceResponse {
	return o.Payload
}

func (o *GetTargetNamespaceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceRegistrationTargetNamespaceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
