// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTargetNamespaceParams creates a new GetTargetNamespaceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTargetNamespaceParams() *GetTargetNamespaceParams {
	return &GetTargetNamespaceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTargetNamespaceParamsWithTimeout creates a new GetTargetNamespaceParams object
// with the ability to set a timeout on a request.
func NewGetTargetNamespaceParamsWithTimeout(timeout time.Duration) *GetTargetNamespaceParams {
	return &GetTargetNamespaceParams{
		timeout: timeout,
	}
}

// NewGetTargetNamespaceParamsWithContext creates a new GetTargetNamespaceParams object
// with the ability to set a context for a request.
func NewGetTargetNamespaceParamsWithContext(ctx context.Context) *GetTargetNamespaceParams {
	return &GetTargetNamespaceParams{
		Context: ctx,
	}
}

// NewGetTargetNamespaceParamsWithHTTPClient creates a new GetTargetNamespaceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTargetNamespaceParamsWithHTTPClient(client *http.Client) *GetTargetNamespaceParams {
	return &GetTargetNamespaceParams{
		HTTPClient: client,
	}
}

/* GetTargetNamespaceParams contains all the parameters to send to the API endpoint
   for the get target namespace operation.

   Typically these are written to a http.Request.
*/
type GetTargetNamespaceParams struct {

	/* DeviceID.

	   Device ID
	*/
	DeviceID string

	/* MatchesCertificate.

	   Information whether device presented certificate corresponding to its id. In contrast to a registration certificate.
	*/
	MatchesCertificate bool

	/* Namespace.

	   Namespace where the device was originally created in
	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get target namespace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTargetNamespaceParams) WithDefaults() *GetTargetNamespaceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get target namespace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTargetNamespaceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get target namespace params
func (o *GetTargetNamespaceParams) WithTimeout(timeout time.Duration) *GetTargetNamespaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get target namespace params
func (o *GetTargetNamespaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get target namespace params
func (o *GetTargetNamespaceParams) WithContext(ctx context.Context) *GetTargetNamespaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get target namespace params
func (o *GetTargetNamespaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get target namespace params
func (o *GetTargetNamespaceParams) WithHTTPClient(client *http.Client) *GetTargetNamespaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get target namespace params
func (o *GetTargetNamespaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get target namespace params
func (o *GetTargetNamespaceParams) WithDeviceID(deviceID string) *GetTargetNamespaceParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get target namespace params
func (o *GetTargetNamespaceParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithMatchesCertificate adds the matchesCertificate to the get target namespace params
func (o *GetTargetNamespaceParams) WithMatchesCertificate(matchesCertificate bool) *GetTargetNamespaceParams {
	o.SetMatchesCertificate(matchesCertificate)
	return o
}

// SetMatchesCertificate adds the matchesCertificate to the get target namespace params
func (o *GetTargetNamespaceParams) SetMatchesCertificate(matchesCertificate bool) {
	o.MatchesCertificate = matchesCertificate
}

// WithNamespace adds the namespace to the get target namespace params
func (o *GetTargetNamespaceParams) WithNamespace(namespace string) *GetTargetNamespaceParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get target namespace params
func (o *GetTargetNamespaceParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *GetTargetNamespaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device-id
	if err := r.SetPathParam("device-id", o.DeviceID); err != nil {
		return err
	}

	// query param matches-certificate
	qrMatchesCertificate := o.MatchesCertificate
	qMatchesCertificate := swag.FormatBool(qrMatchesCertificate)
	if qMatchesCertificate != "" {

		if err := r.SetQueryParam("matches-certificate", qMatchesCertificate); err != nil {
			return err
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
