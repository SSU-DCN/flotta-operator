// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetTargetNamespaceParams creates a new GetTargetNamespaceParams object
//
// There are no default values defined in the spec.
func NewGetTargetNamespaceParams() GetTargetNamespaceParams {

	return GetTargetNamespaceParams{}
}

// GetTargetNamespaceParams contains all the bound params for the get target namespace operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetTargetNamespace
type GetTargetNamespaceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Device ID
	  Required: true
	  In: path
	*/
	DeviceID string
	/*Information whether device presented certificate corresponding to its id. In contrast to a registration certificate.
	  Required: true
	  In: query
	*/
	MatchesCertificate bool
	/*Namespace where the device was originally created in
	  Required: true
	  In: path
	*/
	Namespace string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetTargetNamespaceParams() beforehand.
func (o *GetTargetNamespaceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rDeviceID, rhkDeviceID, _ := route.Params.GetOK("device-id")
	if err := o.bindDeviceID(rDeviceID, rhkDeviceID, route.Formats); err != nil {
		res = append(res, err)
	}

	qMatchesCertificate, qhkMatchesCertificate, _ := qs.GetOK("matches-certificate")
	if err := o.bindMatchesCertificate(qMatchesCertificate, qhkMatchesCertificate, route.Formats); err != nil {
		res = append(res, err)
	}

	rNamespace, rhkNamespace, _ := route.Params.GetOK("namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDeviceID binds and validates parameter DeviceID from path.
func (o *GetTargetNamespaceParams) bindDeviceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.DeviceID = raw

	return nil
}

// bindMatchesCertificate binds and validates parameter MatchesCertificate from query.
func (o *GetTargetNamespaceParams) bindMatchesCertificate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("matches-certificate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("matches-certificate", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("matches-certificate", "query", "bool", raw)
	}
	o.MatchesCertificate = value

	return nil
}

// bindNamespace binds and validates parameter Namespace from path.
func (o *GetTargetNamespaceParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Namespace = raw

	return nil
}
