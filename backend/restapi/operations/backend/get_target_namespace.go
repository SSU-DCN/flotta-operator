// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTargetNamespaceHandlerFunc turns a function with the right signature into a get target namespace handler
type GetTargetNamespaceHandlerFunc func(GetTargetNamespaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTargetNamespaceHandlerFunc) Handle(params GetTargetNamespaceParams) middleware.Responder {
	return fn(params)
}

// GetTargetNamespaceHandler interface for that can handle valid get target namespace params
type GetTargetNamespaceHandler interface {
	Handle(GetTargetNamespaceParams) middleware.Responder
}

// NewGetTargetNamespace creates a new http.Handler for the get target namespace operation
func NewGetTargetNamespace(ctx *middleware.Context, handler GetTargetNamespaceHandler) *GetTargetNamespace {
	return &GetTargetNamespace{Context: ctx, Handler: handler}
}

/* GetTargetNamespace swagger:route GET /namespaces/{namespace}/devices/{device-id}/registration/namespace backend getTargetNamespace

Returns target namespace for the device

*/
type GetTargetNamespace struct {
	Context *middleware.Context
	Handler GetTargetNamespaceHandler
}

func (o *GetTargetNamespace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTargetNamespaceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
