// Code generated by mockery v1.0.0. DO NOT EDIT.

package restapi

import (
	context "context"

	middleware "github.com/go-openapi/runtime/middleware"
	mock "github.com/stretchr/testify/mock"

	operations "github.com/project-flotta/flotta-operator/backend/restapi/operations"
)

// MockOperationsAPI is an autogenerated mock type for the OperationsAPI type
type MockOperationsAPI struct {
	mock.Mock
}

// EnrolDevice provides a mock function with given fields: ctx, params
func (_m *MockOperationsAPI) EnrolDevice(ctx context.Context, params operations.EnrolDeviceParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, operations.EnrolDeviceParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetDeviceConfiguration provides a mock function with given fields: ctx, params
func (_m *MockOperationsAPI) GetDeviceConfiguration(ctx context.Context, params operations.GetDeviceConfigurationParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, operations.GetDeviceConfigurationParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetRegistrationStatus provides a mock function with given fields: ctx, params
func (_m *MockOperationsAPI) GetRegistrationStatus(ctx context.Context, params operations.GetRegistrationStatusParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, operations.GetRegistrationStatusParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// RegisterDevice provides a mock function with given fields: ctx, params
func (_m *MockOperationsAPI) RegisterDevice(ctx context.Context, params operations.RegisterDeviceParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, operations.RegisterDeviceParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// UpdateHeartBeat provides a mock function with given fields: ctx, params
func (_m *MockOperationsAPI) UpdateHeartBeat(ctx context.Context, params operations.UpdateHeartBeatParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpdateHeartBeatParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}
